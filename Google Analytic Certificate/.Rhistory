# Extracting estimated coefficients
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
# Forecasting the next five values using the estimated model
forecast_values <- predict(mod_4, n.ahead = 5)$pred
# Comparing the forecasts with the actual values
diffima <- abs(ima[31:35] - forecast_values)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima[i]))
}
# Plotting the forecasts together with the original series
plot(mod_4, n.ahead = 5, pch = 18)
lines(0:35, ima, col = 'red', type = 'b')
# Repeat with a new simulated series
set.seed(12123)
ima_new = arima.sim(n = 35, list(order = c(0,1,1), ma=-0.8))
# Using the first 30 values of the new series to estimate ARIMA parameters
ima_new_1.3 = window(ima_new, end = 30)
mod_4_new = arima(ima_new_1.3, order = c(0,1,1), method = "ML")
# Extracting estimated coefficients
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta for the new series is", theta_4_new))
# Forecasting the next five values using the estimated model for the new series
forecast_values_new <- predict(mod_4_new, n.ahead = 5)$pred
# Comparing the forecasts with the actual values for the new series
diffima_new <- abs(ima_new[31:35] - forecast_values_new)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima_new[i]))
}
# Plotting the forecasts together with the original series for the new series
plot(mod_4_new, n.ahead = 5, pch = 18)
lines(0:35, ima_new, col = 'red', type = 'b')
data <- "https://raw.githubusercontent.com/prabeshdhakal/Introductory-Time-Series-with-R-Datasets/master/Maine.dat"
data
CBE <- read.table(data, header = T)
CBE
Seasonal.Dataset
data(Seasonal.Dataset)
library(Seasonal.Dataset)
# Get confidence intervals for the estimated marginal means
emm_summary <- summary(we_emm)
data <- read.csv("data.csv")
data <- read.csv("data.csv")
# Load necessary libraries
library(quantmod)
library(dplyr)
library(zoo)
# Define SET100 stock symbols
symbols <- c("ADVANC.BK", "AEONTS.BK", "AMATA.BK", "AOT.BK", "AP.BK", "BANPU.BK",
"BBL.BK", "BCH.BK", "BCP.BK", "BCPG.BK", "BDMS.BK", "BEC.BK",
"BEM.BK", "BGRIM.BK", "BH.BK", "BJC.BK", "BTS.BK", "CBG.BK",
"CENTEL.BK", "CHG.BK", "CK.BK", "CKP.BK", "COM7.BK", "CPALL.BK",
"CPF.BK", "CPN.BK", "CRC.BK", "DELTA.BK", "EA.BK",
"EGCO.BK", "GLOBAL.BK", "GPSC.BK", "GULF.BK", "HMPRO.BK",
"INTUCH.BK", "IRPC.BK", "IVL.BK", "JMART.BK", "JMT.BK", "KBANK.BK",
"KCE.BK", "KKP.BK", "KTB.BK", "KTC.BK", "LH.BK", "MINT.BK",
"MTC.BK", "ORI.BK", "OSP.BK", "PLANB.BK", "PRM.BK", "PTG.BK",
"PTT.BK", "PTTEP.BK", "PTTGC.BK", "QH.BK", "RATCH.BK", "RS.BK",
"SAWAD.BK", "SCB.BK", "SCC.BK", "SCGP.BK", "SGP.BK", "SPALI.BK",
"SPRIME.BK", "STA.BK", "STEC.BK", "STGT.BK", "STPI.BK", "SUPER.BK",
"TASCO.BK", "TCAP.BK", "THANI.BK", "TISCO.BK",  "TOA.BK",
"TOP.BK", "TQM.BK", "TRUE.BK", "TTW.BK", "TU.BK", "VGI.BK", "WHA.BK")
# Download data for SET Index
getSymbols("^SET.BK", from = "2020-01-01", to = Sys.Date(), src = "yahoo")
set_index <- Cl(SET.BK)
data <- na.omit(set_index)
# Create data.frame to store returns
returns <- data.frame(Date = index(data))
# Calculate daily returns for the market index
set_returns <- dailyReturn(data)
set_returns <- na.omit(set_returns)  # Fill missing values with last observed value
returns$SET <- set_returns
returns <- na.omit(returns)
# Download and calculate returns for each stock
for (symbol in symbols) {
getSymbols(symbol, from = "2020-01-01", to = Sys.Date(), src = "yahoo")
stock <- get(symbol)
stock <- na.omit(stock)  # Remove missing values
stock_return <- dailyReturn(Cl(stock))
stock_return <- na.omit(stock_return)  # Fill missing values with last observed value
returns <- merge(returns, data.frame(Date = index(stock_return), stock_return), by = "Date")
}
# Set column names
colnames(returns) <- c("Date", "SET", symbols)
# Remove remaining rows with NA
returns <- na.omit(returns)
# ฟังก์ชันเพื่อคำนวณ NCC #อย่าลืมกำหนดค่่า rm
ncc_test <- function(Rm, Ri) {
mu_i <- mean(Ri)
mu_m <- mean(Rm)
delta_i <- sum((Ri - mu_i)^2) / sum((Rm - mu_m) * (Ri - mu_i))
if (delta_i >= 1 && delta_i <= 10) {
ncc_holds <- TRUE
for (gamma in 2:10) {
Rm_gamma <- Rm^(-gamma)
rho <- cor(Rm_gamma, Ri)
t_test <- cor.test(Rm_gamma, Ri, alternative = "greater")
if (t_test$p.value < 0.05) {
ncc_holds <- FALSE
break
}
}
if (ncc_holds) {
return("The NCC holds")
} else {
return("The NCC does not hold")
}
} else {
return("The NCC does not hold")
}
}
# ตัวอย่างการใช้งานฟังก์ชัน NCC สำหรับหุ้นใน SET100
for (symbol in symbols) {
result <- ncc_test(returns$SET, returns[[symbol]])
print(paste(symbol, ":", result))
}
returns[[symbol]]
returns
returns[[symbol]]
setwd("C:/Users/USER/Desktop/PROJECT NONGEARNZ")
\documentclass{beamer}
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, shape = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,shape = species, color = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,
shape = species, color = species, size = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, alpha = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g), color = 'purple')
library(ggplot2)
library(ggplot2)
library(palmerpenguins)
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_smooth()
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
geom_smooth()
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_smooth() + geom_point()
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g, linetype = species))
ggplot(data = penguins) +
geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut)
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, clarity = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
diamonds
#color bar from color
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point() +
facet_wrap(~species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_wrap(~species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
facet_wrap(~species)
library(ggplot2)
library(palmerpenguins)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_wrap(~species)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut))
facet_wrap(~cut)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut))
facet_wrap(~cut)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut)) +
facet_wrap(~cut)
diamonds
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_wrap(~species)
ggplot(data = diamonds) +
geom_bar(aes(x = color, fill = cut)) +
facet_wrap(~cut)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_grid(sex~species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_wrap(~species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
facet_grid(~species)
setwd("C:/Users/USER/Desktop/Google Analytic Certificate")
hotel_bookings
## Step 1: Import your data
hotel_bookings <- read.csv("hotel_bookings.csv")
## Step 2: Refresh Your Memory
head(hotel_bookings)
library(ggplot2)
## Step 4: Making a Bar Chart
#
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel, fill=deposit_type))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel, fill=market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~ deposit_type)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_grid(~deposit_type) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type) +
theme(axis.text.x = element_text(angle = 45))
#put all of this in one chart and explore the differences by deposit type and market segment
ggplot(data = hotel_bookings, aes(x = distribution_channel)) +
geom_bar() +
facet_grid(deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings, aes(x = distribution_channel)) +
geom_bar() +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings, aes(x = distribution_channel)) +
geom_bar() +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings, mapping = aes(x = distribution_channel)) +
geom_bar() +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
#put all of this in one chart and explore the differences by deposit type and market segment
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_grid(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings, aes(x = distribution_channel)) +
geom_bar() +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
library(ggplot2)
ggplot(data = hotel_bookings) +
geom_point(mapping = aes(x = lead_time, y = children))
#which market segments generate the largest number of bookings,
#and where these bookings are made (city hotels or resort hotels)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, fill = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel)) +
facet_wrap(~market_segment)
## Step 5: Filtering
library(tidyverse)
onlineta_city_hotels <- filter(hotel_bookings,
(hotel=="City Hotel" &
hotel_bookings$market_segment=="Online TA"))
onlineta_city_hotels
onlineta_city_hotels <- filter(hotel_bookings,
(hotel=="City Hotel" &
market_segment=="Online TA"))
onlineta_city_hotels
onlineta_city_hotels_v2 <- hotel_bookings %>%
filter(hotel == "City Hotel") %>%
filter(market_segment == "Online TA")
onlineta_city_hotels_v2
ggplot(data = onlineta_city_hotels_v2) +
geom_point(mapping = aes(x = lead_time, y = children))
library(ggplot2)
library(palmerpenguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
theme()
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest",
color = "purple")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest",
color = "purple", fontface = "bold")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest",
color = "purple", fontface = "bold", size = 4.5)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman") +
annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest",
color = "purple", fontface = "bold", size = 4.5, angle = 25)
p <-  ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
labs(title = "Palmer Penguins: Body Mass vs Flipper Length",
subtitle = "Sample of Three Penguin Species",
caption = "Data collected by Dr. Kristen Gorman")
p + annotate("text", x = 220, y = 3500, label = "The Gentoo are the largest")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species))
setwd("C:/Users/USER/Desktop/Google Analytic Certificate")
ggsave("Three Penguin Species.png")
setwd("C:/Users/USER/Desktop/Google Analytic Certificate")
## Step 1: Import your data
hotel_bookings <- read.csv("hotel_bookings.csv")
## Step 1: Import your data
hotel_bookings <- read.csv("hotel_bookings.csv")
## Step 2: Refresh Your Memory
head(hotel_bookings)
colnames(hotel_bookings)
library(ggplot2)
library(tidyverse)
## Step 4: Annotating your chart
#compares market segments between city hotels and resort hotels
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
labs(title = "Comparison of market segments by hotel type for hotel bookings")
#add another detail about what time period
#earliest year
min(hotel_bookings$arrival_date_year)
#latest year
max(hotel_bookings$arrival_date_year)
mindate <- min(hotel_bookings$arrival_date_year)
maxdate <- max(hotel_bookings$arrival_date_year)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
subtitle=paste0("Data from: ", mindate, " to ", maxdate))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate))
#want to clean up the x and y axis labels to make sure they are really clear
#add to the `labs()` function and use `x=` and `y=`. to change the text of the label
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate),
x="Market Segment",
y="Number of Bookings")
ggsave('hotel_booking_chart.png', width=7,
height=7)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = color, fill = cut)) +
facet_wrap(~clarity)
install.packages(rmarkdown)
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
library(tidyverse)
library(palmerpenguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
library(tidyverse)
library(palmerpenguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
library(tidyverse)
library(palmerpenguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
library(tidyverse)
library(palmerpenguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
unlink("ggplot_hook_note_cache", recursive = TRUE)
load("C:/Users/USER/Documents/GitHub/my-analysis/Google Analytic Certificate/.RData")
