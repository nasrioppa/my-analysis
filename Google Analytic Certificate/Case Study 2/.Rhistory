set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
#(2) forecast the next eight values of the series. Plot the series together with the eight forecasts.
output_4_new  = plot(mod_4_new,n.ahead = 5,pch=18)
set.seed(12123)
ima_new = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima_new
ima_new_1.3cut = ima_new[2:31]
ima_new_1.3 = window(ima_new_1.3cut,end=30)
ima_new_1.5cut = ima_new[32:36]
ima_new_1.5 = window(ima_new_1.5cut,end=5)
mod_4_new = arima(ima_new_1.3,order = c(0,1,1), method = "ML")
mod_4_new
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta is", theta_4_new))
output_4_new  = plot(mod_4_new,n.ahead = 5,pch=18)
#(2) forecast the next eight values of the series. Plot the series together with the eight forecasts.
output_4_new  = plot(mod_4_new,n.ahead = 5,pch=18)
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta is", theta_4_new))
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta is", theta_4_new))
#(2) forecast the next eight values of the series. Plot the series together with the eight forecasts.
output_4_new  = plot(mod_4_new,n.ahead = 5,pch=18)
output_4_new$pred
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
output_4  = plot(mod_4,n.ahead = 5,pch=18)
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
theta_4
mod_4
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
knitr::opts_chunk$set(echo = TRUE)
# Generate forecasts for the test set
forecastd1_result <- forecast(mod.d1, h = 8, level = 0.95)
# Generate forecasts for the test set
forecastd1_result <- forecast(mod.d1, h = 8, level = 0.95)
forecast
library(forecast)
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
output_4$pred
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5)
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
output_4$pred
predima = output_4$pred
#3. Compare the five forecasts with the actual values that you set aside
diffima = abs(ima_1.5-predima)
library(forecast)
library(forecast)
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1),ma=-0.8))
ima
#1. Using the first 30 values of the series, find the value for the maximum likelihood estimate of theta.
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4  = plot(mod_4,n.ahead = 5,pch=18)
output_4$pred
predima = output_4$pred
#3. Compare the five forecasts with the actual values that you set aside
diffima = abs(ima_1.5-predima)
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
forecast_4 = forecast(mod_4, h = 5)
autoplot(forecast_4)
output_4  = plot(mod_4,n.ahead = 5,pch=18)
output_4 = plot(mod_4,n.ahead = 5,pch=18)
output_4 = plot(mod_4,n.ahead = 5,pch=18)
mod_4_new = arima(ima_new_1.3,order = c(0,1,1), method = "ML")
mod_4_new
plot(ima, type = "l", xlim = c(1, length(ima) + 5), ylim = range(c(ima, forecast_values$mean)))
forecast_values <- forecast(mod_4, h = 5)
plot(ima, type = "l", xlim = c(1, length(ima) + 5), ylim = range(c(ima, forecast_values$mean)))
lines(forecast_values$mean, col = "blue")
output_4 = plot(mod_4,n.ahead = 5, pch=18)
output_4 = plot(mod_4,n.ahead = 4, pch=18)
library(stats)
library(forecast)
library(stats)
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
output_4 = plot(mod_4,n.ahead = 5, pch=18)
output_4$pred
predima = output_4$pred
output_4 = plot(mod_4,n.ahead = 5, pch=18)
output_4 = plot(mod_4,n.ahead = 5, pch=18)
mod_4
mod_4
theta_4 = mod_4$coef
theta_4
print(paste("The maximum likelihood estimates of theta is", theta_4))
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
mod_4
ima_1.3
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.3cut = ima[2:31]
ima_1.3 = window(ima_1.3cut,end=30)
ima_1.5cut = ima[32:36]
ima_1.5 = window(ima_1.5cut,end=5)
mod_4 = arima(ima_1.3,order = c(0,1,1), method = "ML")
mod_4
output_4 = plot(mod_4,n.ahead = 5, pch=18)
plot
n.ahead = 5
output_4 = plot(mod_4, n.ahead = 5, pch=18)
#2.Using the estimated model, forecast the next five values of the series. Plot the series together with the five forecasts. What is special about the forecasts?
forecast_values <- forecast(mod_4, h = 5)
output_4 = plot(forecast_values, n.ahead = 5, pch=18)
# Forecast the next five values using the estimated model
forecast_values <- predict(mod_4, n.ahead = 5)$pred
# Plot the original series
plot(ima, type = "l", xlim = c(1, length(ima) + 5), ylim = range(c(ima, forecast_values)), xlab = "Time", ylab = "Value")
# Add forecasted values to the plot
time_index <- length(ima) + 1:length(forecast_values)
lines(time_index, forecast_values, col = "blue", type = "p", pch = 18)
diffima = abs(ima_1.5-predima)
#3. Compare the five forecasts with the actual values that you set aside
diffima = abs(ima_1.5-predima)
predima = output_4$pred
diffima = abs(ima_1.5-predima)
abs
diffima = abs(ima_1.5-predima)
output_4 = plot(mod_4, n.ahead = 5, pch=18)
output_4$pred
predima = output_4$pred
#3. Compare the five forecasts with the actual values that you set aside
diffima <- abs(ima_1.5 - predima)
(a) If sales for 2005,2006, and 2007 were $9 million, $11 million, and $10 million,
#(a) If sales for 2005,2006, and 2007 were $9 million, $11 million, and $10 million, respectively, forecast sales for 2008, 2009 and 2010.
#Calculate
acmecal = c(9,11,10)
thetazero = 5
phi1 = 1.1
phi2 = -0.5
for (i in 1:3) {
n = length(acmecal)
forecast_acme = thetazero + phi1 * acmecal[n] + phi2 * acmecal[n - 1]
# Update
acmecal <- c(acmecal, forecast_acme)
print(paste('The forcast sales for',2007+i,'is',forecast_acme))
}
#Plot
acme = c(9,11,10)
mod3 = arima(acme, order = c(2,0,0), fixed = c(phi1,phi2,thetazero/(1-phi1-
phi2)))
mod3
output3 = plot(mod3,n.ahead = 3,pch=18)
print(paste('the difference of forecasts and the actual values at l =',i,
'is', diffima[i]))
mod3
#Calculate
acmecal = c(9,11,10)
thetazero = 5
phi1 = 1.1
phi2 = -0.5
for (i in 1:3) {
n = length(acmecal)
forecast_acme = thetazero + phi1 * acmecal[n] + phi2 * acmecal[n - 1]
# Update
acmecal <- c(acmecal, forecast_acme)
print(paste('The forcast sales for',2007+i,'is',forecast_acme))
}
#Plot
acme = c(9,11,10)
mod3 = arima(acme, order = c(2,0,0), fixed = c(phi1,phi2,thetazero/(1-phi1-
phi2)))
mod3
output3 = plot(mod3,n.ahead = 3,pch=18)
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1), ma=-0.8))
# Using the first 30 values of the series to estimate ARIMA parameters
ima_1.3 = window(ima, end = 30)
mod_4 = arima(ima_1.3, order = c(0,1,1), method = "ML")
# Extracting estimated coefficients
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
# Forecasting the next five values using the estimated model
forecast_values <- predict(mod_4, n.ahead = 5)$pred
# Comparing the forecasts with the actual values
diffima <- abs(ima[31:35] - forecast_values)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima[i]))
}
# Plotting the forecasts together with the original series
plot(mod_4, n.ahead = 5, pch = 18)
lines(0:35, ima, col = 'red', type = 'b')
# Repeat with a new simulated series
set.seed(12123)
ima_new = arima.sim(n = 35, list(order = c(0,1,1), ma=-0.8))
# Using the first 30 values of the new series to estimate ARIMA parameters
ima_new_1.3 = window(ima_new, end = 30)
mod_4_new = arima(ima_new_1.3, order = c(0,1,1), method = "ML")
# Extracting estimated coefficients
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta for the new series is", theta_4_new))
# Forecasting the next five values using the estimated model for the new series
forecast_values_new <- predict(mod_4_new, n.ahead = 5)$pred
# Comparing the forecasts with the actual values for the new series
diffima_new <- abs(ima_new[31:35] - forecast_values_new)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima_new[i]))
}
# Plotting the forecasts together with the original series for the new series
plot(mod_4_new, n.ahead = 5, pch = 18)
lines(0:35, ima_new, col = 'red', type = 'b')
set.seed(1234)
ima = arima.sim(n = 35, list(order = c(0,1,1), ma=-0.8))
# Using the first 30 values of the series to estimate ARIMA parameters
ima_1.3 = window(ima, end = 30)
mod_4 = arima(ima_1.3, order = c(0,1,1), method = "ML")
# Extracting estimated coefficients
theta_4 = mod_4$coef
print(paste("The maximum likelihood estimates of theta is", theta_4))
# Forecasting the next five values using the estimated model
forecast_values <- predict(mod_4, n.ahead = 5)$pred
# Comparing the forecasts with the actual values
diffima <- abs(ima[31:35] - forecast_values)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima[i]))
}
# Plotting the forecasts together with the original series
plot(mod_4, n.ahead = 5, pch = 18)
lines(0:35, ima, col = 'red', type = 'b')
# Repeat with a new simulated series
set.seed(12123)
ima_new = arima.sim(n = 35, list(order = c(0,1,1), ma=-0.8))
# Using the first 30 values of the new series to estimate ARIMA parameters
ima_new_1.3 = window(ima_new, end = 30)
mod_4_new = arima(ima_new_1.3, order = c(0,1,1), method = "ML")
# Extracting estimated coefficients
theta_4_new = mod_4_new$coef
print(paste("The maximum likelihood estimates of theta for the new series is", theta_4_new))
# Forecasting the next five values using the estimated model for the new series
forecast_values_new <- predict(mod_4_new, n.ahead = 5)$pred
# Comparing the forecasts with the actual values for the new series
diffima_new <- abs(ima_new[31:35] - forecast_values_new)
for (i in 1:5) {
print(paste('the difference of forecasts and the actual values at l =', i, 'is', diffima_new[i]))
}
# Plotting the forecasts together with the original series for the new series
plot(mod_4_new, n.ahead = 5, pch = 18)
lines(0:35, ima_new, col = 'red', type = 'b')
data <- "https://raw.githubusercontent.com/prabeshdhakal/Introductory-Time-Series-with-R-Datasets/master/Maine.dat"
data
CBE <- read.table(data, header = T)
CBE
Seasonal.Dataset
data(Seasonal.Dataset)
library(Seasonal.Dataset)
# Get confidence intervals for the estimated marginal means
emm_summary <- summary(we_emm)
data <- read.csv("data.csv")
data <- read.csv("data.csv")
# Load necessary libraries
library(quantmod)
library(dplyr)
library(zoo)
# Define SET100 stock symbols
symbols <- c("ADVANC.BK", "AEONTS.BK", "AMATA.BK", "AOT.BK", "AP.BK", "BANPU.BK",
"BBL.BK", "BCH.BK", "BCP.BK", "BCPG.BK", "BDMS.BK", "BEC.BK",
"BEM.BK", "BGRIM.BK", "BH.BK", "BJC.BK", "BTS.BK", "CBG.BK",
"CENTEL.BK", "CHG.BK", "CK.BK", "CKP.BK", "COM7.BK", "CPALL.BK",
"CPF.BK", "CPN.BK", "CRC.BK", "DELTA.BK", "EA.BK",
"EGCO.BK", "GLOBAL.BK", "GPSC.BK", "GULF.BK", "HMPRO.BK",
"INTUCH.BK", "IRPC.BK", "IVL.BK", "JMART.BK", "JMT.BK", "KBANK.BK",
"KCE.BK", "KKP.BK", "KTB.BK", "KTC.BK", "LH.BK", "MINT.BK",
"MTC.BK", "ORI.BK", "OSP.BK", "PLANB.BK", "PRM.BK", "PTG.BK",
"PTT.BK", "PTTEP.BK", "PTTGC.BK", "QH.BK", "RATCH.BK", "RS.BK",
"SAWAD.BK", "SCB.BK", "SCC.BK", "SCGP.BK", "SGP.BK", "SPALI.BK",
"SPRIME.BK", "STA.BK", "STEC.BK", "STGT.BK", "STPI.BK", "SUPER.BK",
"TASCO.BK", "TCAP.BK", "THANI.BK", "TISCO.BK",  "TOA.BK",
"TOP.BK", "TQM.BK", "TRUE.BK", "TTW.BK", "TU.BK", "VGI.BK", "WHA.BK")
# Download data for SET Index
getSymbols("^SET.BK", from = "2020-01-01", to = Sys.Date(), src = "yahoo")
set_index <- Cl(SET.BK)
data <- na.omit(set_index)
# Create data.frame to store returns
returns <- data.frame(Date = index(data))
# Calculate daily returns for the market index
set_returns <- dailyReturn(data)
set_returns <- na.omit(set_returns)  # Fill missing values with last observed value
returns$SET <- set_returns
returns <- na.omit(returns)
# Download and calculate returns for each stock
for (symbol in symbols) {
getSymbols(symbol, from = "2020-01-01", to = Sys.Date(), src = "yahoo")
stock <- get(symbol)
stock <- na.omit(stock)  # Remove missing values
stock_return <- dailyReturn(Cl(stock))
stock_return <- na.omit(stock_return)  # Fill missing values with last observed value
returns <- merge(returns, data.frame(Date = index(stock_return), stock_return), by = "Date")
}
# Set column names
colnames(returns) <- c("Date", "SET", symbols)
# Remove remaining rows with NA
returns <- na.omit(returns)
# ฟังก์ชันเพื่อคำนวณ NCC #อย่าลืมกำหนดค่่า rm
ncc_test <- function(Rm, Ri) {
mu_i <- mean(Ri)
mu_m <- mean(Rm)
delta_i <- sum((Ri - mu_i)^2) / sum((Rm - mu_m) * (Ri - mu_i))
if (delta_i >= 1 && delta_i <= 10) {
ncc_holds <- TRUE
for (gamma in 2:10) {
Rm_gamma <- Rm^(-gamma)
rho <- cor(Rm_gamma, Ri)
t_test <- cor.test(Rm_gamma, Ri, alternative = "greater")
if (t_test$p.value < 0.05) {
ncc_holds <- FALSE
break
}
}
if (ncc_holds) {
return("The NCC holds")
} else {
return("The NCC does not hold")
}
} else {
return("The NCC does not hold")
}
}
# ตัวอย่างการใช้งานฟังก์ชัน NCC สำหรับหุ้นใน SET100
for (symbol in symbols) {
result <- ncc_test(returns$SET, returns[[symbol]])
print(paste(symbol, ":", result))
}
returns[[symbol]]
returns
returns[[symbol]]
setwd("C:/Users/USER/Desktop/PROJECT NONGEARNZ")
\documentclass{beamer}
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
data(penguins)
View(penguins)
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g)) +
geom_point(aes(color=species),
shape=species) +
facet_wrap(~sex)
penguins
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
ggplot(data=penguins,aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(color="purple")
ggplot(data=penguins,aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(shape=species))
ggplot(data=penguins,aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species,
shape=species)) +
facet_wrap(~sex)
```{r}
penguins %>%
drop_na(sex) %>%
ggplot(data=penguins,aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species,
shape=species)) +
facet_wrap(~sex)
penguins
penguins %>%
drop_na(sex) %>%
ggplot(data=penguins,aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species,
shape=species)) +
facet_wrap(~sex)
penguins %>%
drop_na(sex) %>%
ggplot(aes(x=flipper_length_mm,y=body_mass_g))+
geom_point(aes(color=species,
shape=species)) +
facet_wrap(~sex)
setwd("C:/Users/USER/Desktop/Google Analytic Certificate/Case Study 2")
daily_activity <- read.csv("dailyActivity_merged.csv")
# Create another dataframe for the sleep data.
sleep_day <- read.csv("sleepDay_merged.csv")
daily_activity
sleep_day
head(daily_activity)
# Identify all the columns in the daily_activity data.
colnames(daily_activity)
head(sleep_day)
colnames(sleep_day)
# Identify all the columns in the daily_activity data.
colnames(daily_activity)
n_distinct(daily_activity$Id)
############################
library(tidyverse)
n_distinct(daily_activity$Id)
n_distinct(sleep_day$Id)
nrow(daily_activity)
nrow(sleep_day)
daily_activity %>%
select(TotalSteps,
TotalDistance,
SedentaryMinutes) %>%
summary()
sleep_day %>%
select(TotalSleepRecords,
TotalMinutesAsleep,
TotalTimeInBed) %>%
summary()
ggplot(data = daily_activity, aes(x=TotalSteps, y=SedentaryMinutes)) + geom_point()
ggplot(data=sleep_day, aes(x=TotalMinutesAsleep, y=TotalTimeInBed)) + geom_point()
combined_data <- merge(sleep_day, daily_activity, by="Id")
n_distinct(combined_data$Id)
combined_data
ggplot(data = combined_data, aes(x= TotalMinutesAsleep, y=TotalSteps)) + geom_point()
ggplot(data = combined_data, aes(x= TotalSteps, y=TotalMinutesAsleep)) + geom_point()
ggplot(data = combined_data, aes(x= TotalSteps, y=Calories)) + geom_point()
ggplot(data = combined_data, aes(x= TotalSteps, y = TotalDistance)) + geom_point()
